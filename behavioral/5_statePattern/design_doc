Motivation

Consider an ordinary telephone :
What you can do with it depends on the state of the phone
	- If it's ringing or you want to make a call, you can pick it up
	- Phone must be off the hook to take/make call
	- if you are calling someone and it's busy then you put the handset down
	  or leave a message or stay on hold

Changes in state can be explicit or in response to events. (e.g. observer)
(someone is calling you and the observer pick it up)


State
A pattern in which the object's behavior is determined by its state.
An object transitions from one state to another(something needs to trigger the transition).
A formalized construct which manages states and transitions from one state to another is
called a state machine.


Can define
- State entry/exit behaviors
- Action when a particular even causes a transition
- Guard conditions enabling/disabling a transition
- Default action when no transitions are found for an even






	This pattern is used to manage different states of an object. Some Objects are state-driven, i.e. they behave differently
	based on their current state. This is normally implemented using flags and conditional statements.
	This might lead to unmaintainable large conditional constructs.

	Such an object can be considered as a State Machine. A state machine is an abstract machine that can be in exactly
	one finite state at any given time and can change from one state to another in response to some event.
	This transition can be implemented through conditional statements. Adding new states or transitions
	might become difficult as the conditional statements increases.


	State-Pattern provides an alternative to this design.
		It separates the class into two parts the main class that will hold the data and state classes.
		The state changes are then distributed among these classes.
		The state objects provide the behavior for the main object which only hold the state data.
		When its methods are invoked it will forward the call to the state object which will provide the behavior.

		This eliminates conditional statements and make it convinient to add more states and transitions.



	Intent : Allow an object to alter its behavior when its internal
	         state changes.


	Structure :

	---------------		state				    ---------------
	|   Context   |<>---------------------------|   State     |
	---------------								---------------
	| Request()   |                             | Handle()    |
	---------------                             ---------------
		state->Handle();					         /_\
													  |
											__________|_______________...
											|		  		     |
								  --------------------    --------------------
								  |  ConcreteStateA  |    |  ConcreteStateA  |
								  --------------------    --------------------
								  | Handle()         |    | Handle()         |
								  --------------------    --------------------


		- Context is the main object, and is a Finite State Machine.
		- Different state related behavior are in the concrete state classes.
		  Instances of these classes are objects for states.
		- When a request is made internally to the Context, internally it sends the request to
		  the concrete state object.
		- State object will provide the behavior and may also change the state of the Context class.

		- Transitions:
			- If there are few transitions, the Context class can implement them.
			- But it is more flexible to let the State classes temselves specify the transition.
			- If the transition logic is more complicated, it can be moved to a separate class.
			  A distributed transition logic is more easy to extend and modify.




